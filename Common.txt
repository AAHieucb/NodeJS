# Tạo streaming server cho video
Dùng link youtube, ipfs, đăng lên cdn cloud tốt hơn là dựng hẳn 1 streaming server vì tốn, trừ các web chuyên về video k muốn phụ thuộc bên thứ 3.
Cơ chế streaming server: Mỗi đoạn của video khi xem sẽ gửi http request nhận về 1 lượng bytes kể từ vị trí đó trở đi và tiếp tục cho đến hết video, thông tin này nằm trong header. Ở FE, video player của html5 hỗ trợ sẵn việc gửi request đi và xử lý response nhận về như nào rồi, server chỉ cần gửi lại đúng format response là được

-> Cơ chế tính lượt view cho video không phải là số lần gọi request GET và cũng k yêu cầu phải lấy xem hết mọi bytes của video. 
VD chọn 1 mốc 30s và chia khoảng 30s đó khắp video thay đổi vị trí random liên tục. Vd 10s đầu ở đoạn 1p->1p10s, 10s sau ở 2p->2p10s, 10s cuối ở 3p50s->4p => user phải xem đúng các đoạn đó mới +1 view. 

VD 1 giải pháp chống spam view là lưu IP user vào cache tự hết hạn và bị xóa sau khoảng 5p. Mỗi khi định tăng view bởi 1 ip sẽ check ip vẫn có trong database thì k cộng view lên. Tức là người dùng refresh liên tục trong 5p sẽ k có tác dụng vì ip vẫn có trong DB, video length > 5p. Tức max 1 người trong 5p chỉ được 1 view.
=> Thực ra lưu ip k ổn VD nhiều người cùng bắt VPN hay chung mạng LAN sẽ k chuẩn, ta có thể tạo 1 userid ảo dù chưa login và lưu 1 id vào cookies chứ kp lưu ip, mỗi request phải gửi kèm cookies lên để server check.

VD các nghệ sĩ nổi tiếng khi cộng lượt view tăng quá nhanh, chắc chắn DB k thể sử dụng MySQL hay MongoDB mà phải sử dụng cache như redis.
Nên thêm ratelimit và black list chặn ip truy cập bất thường. VD 1 IP truy cập đồng thời tới cả nghìn lần 1p thì khá vô lý cho 1 mạng LAN thì sẽ bị chặn ngay. VD Dùng nginx làm reserve proxy có thể lấy được ip của user trong header trường X-Forwarded-For



# Dùng HTTP2 HTTP3
HTTP1 thì mỗi yêu cầu là 1 connection TCP riêng.

HTTP1.1 duy trì kết nối cho phép nhiều yêu cầu tới 1 server được xử lý trong cùng một kết nối TCP.
Head-of-Line Blocking là hiện tượng response request trước quá lâu làm cho các requests sau bị blocked. Http1.1 đỡ hơn vì có HTTP pipelining cho phép gửi nhiều request đồng thời trên cùng 1 TCP connection mà không cần chờ request trước done, nhưng response vẫn trả về phải đúng thứ tự trong 1 connection, nên HoL k đươc cản hoàn toàn.
Để đảm bảo k bị lỗi đơ luôn, browser duy trì nhiều TCP connection tới server và gửi song song, chứ k chỉ 1 connection.

HTTP2 dùng HTTP stream. Trong 1 TCP connection có thể gửi hàng loạt các stream request và các stream k cần đúng thứ tự nữa, giải quyết vấn đề Head-of-Line Blocking ở tầng application nhưng vẫn bị ở tầng transport với TCP: Client <--- 1 TCP connection [Stream1 header, stream2 header, stream1 data, stream3 header, ...] ---> Server
Server push new data tới client khi có update mà k cần client phải poll liên tục, giảm sô request. Dùng HPACK nén giảm kích thước header. Dùng binary format nhanh hơn so với định dạng văn bản của HTTP/1.x.

HTTP3 dùng protocol QUIC, dựa trên UDP ở ngay tầng transport nhưng nó chỉnh sửa để UDP mà tốt hơn TCP, vẫn có cơ chế phục hồi gói tin khi bị mất.
Client <--- 1 QUIC/UDP connection [Stream1, stream2, stream3, ...] ---> Server
QUIC cũng được dùng để đổi mạng trong điện thoại mà k bị lag vì dùng chung 1 connection id.

=> Cũng có thể dựng 1 proxy nginx server dùng HTTP2, khi đó sẽ k tận dụng hết dược sức mạnh của HTTP2: Client <-- HTTP2 --> Nginx <-- HTTP1.1 --> Server

-> NodeJS có built-in node:http2 => k dùng được cho expressjs
http3 k hỗ trợ nodejs, chỉ có cách dựng nginx http3 thôi. ASP.NET có hỗ trợ thẳng http3.

spdy là 1 giao thức tiền thân của http2, package spdy giúp expressjs dùng http2 => luôn dùng. Khi k support http2, tự downgrade http1.1 ok
Package này có code ở client side để call api tới server trong trường hợp client side k hỗ trợ http2 => k cần thiết vì h luôn hỗ trợ

-> Từ HTTP2 trở đi, luôn phải có SSL.
Giả sử host lên VPS và cấu hình nginx dùng http2 với ssl ok. Browser query api sẽ dùng http2 gửi đến máy VPS rồi vào nginx thiết lập connection. Giả sử cấu hình nginx chuyển tiếp vào expressjs dùng http2 ssl thì nginx và express server cũng tương tác với nhau qua giao thức http2. SSL ở nginx và express server là độc lập, có thể dùng chung cert ok.
Nếu nginx và express server là connect nội bộ cùng 1 máy or cùng mạng LAN thì nên dùng http để tiết kiệm và tối ưu tốc độ, còn nginx dùng http2 ra ngoài là best practice. Nginx và server nội bộ chỉ dùng http2 là các máy rời rạc và cần zero trust thôi. Hoặc khi k có nginx mà express dùng http2 trực tiếp.



# Chia file BE hệ thống lớn
Best practice vẫn là chia theo chức năng, bên trong từng chức năng chia theo file từng module
Tính năng
  Tính năng con
    Module
      Module con
  Common

1) NodeJS: việc chia file khá hiển nhiên.
src
  api
    v1
    v2
      routes
        auth.route.js
        blog.route.js
      controllers
        auth.controller.js
        blog.controller.js
        index.js
      utils
        staticvalidationhelper.js
        staticutility.js
      middlewares
      models  
        blog.js
        bloguser.js
      services
        jwt.service.js
        blog.service.js
      validations
      logs
  config
    database.config.js
    redis.config.js
    index.js
tests
.env.dev
.env.prod
database.j
index.js => run main function
server.js => start server nodejs
test.http

2) ASP.NET hướng đối tượng phức tạp:
Smp.Web (dự án chính)
  Controllers (folder)
    Voice (folder)
      VoicePolicyController.cs
      VoiceUserController.cs
    Teams (folder)
    HomeController.cs
    EmailController.cs
  Attributes (folder)
    LicenseAttribute.cs
    AuditorAttribute.cs
  Middlewares (folder)
  Models (folder) => model mà chỉ dùng trong Smp.Web
  appsettings.Development.json
  appsettings.Production.json
  Program.cs => chạy hàm main
  Startup.cs => file setup
Voice (folder)
  Voice.Service (library)
    Actions (folder)
      VoiceScanPolicyAction.cs
      VoiceScanCallQueueAction.cs
    Interface (folder)
    Service (folder)
      VoicePolicyService.cs
      VoiceCallQueueService.cs
PowerPlatform (folder)
  PowerPlatform.Service (library)
    Impl (folder)
      PowerApps(folder)
        PowerPlatformPowerAppsService.cs
        PowerPlatformPowerAppsFromDBService.cs
      Environment (folder)
Common (folder)
  Smp.Database.Core (library)
  Smp.Common(library)
    Job (folder)
      IJobAction.cs
      JobContext.cs
    Helpers (folder)
      CipherHelper.cs
      LoginHelper.cs
    Models (folder)
      AuditorInfo.cs
      ProcessCenterModel.cs
  Smp.Service.Common (library)
    GraphClient (folder)
    Login (folder)
      LoginService.cs
      PrincipalService.cs
    Storage (folder)
      BlobStorageService.cs
      TableStorageService.cs



# Kiểu data nested và graph 
VD workflow condition khi AND OR lồng nhiều cấp, nested comment.
Requirements: chèn, sửa, thêm data nhanh, 1 node đổi vị trí trong cây; lấy mọi nodes con của 1 node cha nhanh; 1 con nhiều cha hay 1 cha nhiều con; Lấy node cha của node con; Có hướng hay vô hướng; Có quan tâm thú tự các con trong 1 cha không; thứ tự duyệt các node.

- Database lưu data recursive dưới dạng json string, deserialize ra nested class object trực tiếp được, mỗi lần lấy tất cả r xử lý bằng code. 
Hoặc database lưu parentid là foreign key tới chính nó được, sẽ lưu dưới dạng adjacent list. Con nối với 1 cha thôi. Có thể dùng binary tree.
Database lưu thêm 1 trường chỉ định vị trí nested và thứ tự. VD: path="1.2.3" là con của row có path="1.2", tìm kiếm mọi con với WHERE path LIKE '1.2.%'
Database lưu mỗi row có 1 trường left và right (nested set model). VD X có left=1, right=10 thì tìm mọi con của X với WHERE left > 1 AND right < 10. Khi update phải update left right mọi con.
Đơn giản là lưu như flat nhưng thêm 1 trường là parentId. Lấy list data từng cấp rất nhanh: lv1 lấy mọi comment k có parentid, view more 1 comment lv1 thì lấy mọi comment có parentId là id comment đó là xong.

- Class object có thể chứa trường tự nested đệ quy được. Có thể lưu như 1 adjacent list, chỉ cần id của node cha thôi.
Với dạng graph nhiều node 2 chiều, class object nên lưu kiểu graph. Số lượng k nên quá nhiều. Áp dụng các thuật toán tìm kiếm trên graph được.
Class object có thể lưu dạng đường path "1.2.3", lưu left và right đánh dấu vị trí hiện tại trên cây.

- Xử lý recursive thì gọi hàm recursive, hoặc convert sang vòng while bằng cách dùng stack or queue.
Với data lưu dạng phẳng thì viết hàm xử lý bth.



# json-server http-server
FreeAPI: https://jsonplaceholder.typicode.com/posts

-> json-server / lite-server có thể dùng 1 file text bth làm db, chú ý là k có tính ACID của DB bth.

json-server --watch <link đến file db.json> --port 4000 => file db thay đổi sẽ update realtime.
GET /employees/1/?_sort=firstName&amp;_order=desc
GET /employees?_page=7&amp;_limit=20

-> Còn có http-server dựng http server nhanh: cd thư mục -> http-server -c-1 (-c-1 để disable cache) => thêm file html vào thư mục để serve nó



# Publish package npm
Tạo file readme
package.json cần có các thông tin như: license, git repo, name, version, bugs, homepage có thể hiển thị trên các nền tảng như npm, github, document, 1 số loại IDE
Phải push code lên github
Package phải có file export tính năng cho ứng dụng dùng.

Tạo 1 folder ngoài cùng để test package
Vào folder test "npm link <tên package>" => Lệnh này sẽ import cái package của ta vào trong node_modules của folder test. Mọi lệnh sửa ở 1 trong 2 folder test hay folder package sẽ đều tự sửa ở folder còn lại, giúp ta có thể test liên tục mà k cần sửa 2 nơi thủ công. Đây cũng là cách để chạy package local cho dự án mà k cần publish lên npm

Tạo tk trên npmjs.com và chạy "npm login"
Check xem trên trang chủ phải chưa có package nào trùng tên với package của ta
Vào folder package "npm publish"
Khi sửa package, nhớ push lại lên git, sửa version, "npm login", "npm publish" lại

Nếu tạo package cho frontend, phải build thành ESModule bằng bundler hoặc code luôn type module. Và khuyến khích dùng typescript để cung cho frontend dùng đúng kiểu khi frontend dùng typescript. 

-> yalc giúp dùng local package trong project, thay cho npm link
Dùng package bên trong dự án luôn mà k cần publish lên npm: Vào trong thư mục chứa package: "yalc publish" -> quay lại thư mục chứa package.json của dự án: "yalc add <tên package>" -> yalc sẽ tự thêm vào package.json đường dẫn local đến package và ta import dùng như bth
Để remove package: cd vào folder chứa package.json của project -> yalc remove my-package
Đẻ upgrade package: sửa code package như bth -> lặp lại: cd ../my-package -> yalc publish -> cd ../my-project -> yalc update my-package



# Thiết kế FE cho handling permission
-> Dự án nhỏ với vài role cơ bản có thể check trực tiếp ở mọi chỗ
{ user.role == "admin" && <></>} => chỉ admin mới hiện component
{ user.role == "admin" || user.role == "moderator" || user.id == authorId && <></>} => mở rộng để moderator và chủ của bài viết cũng có thể xem component

-> RBAC: User gắn với nhiều roles. Roles có nhiều permission. 1 permission gồm action:resource.
Sửa quyền của role chỉ cần sửa ở 1 nơi duy nhất, và cung ra hàm check 1 role có quyền gì.
VD https://github.com/WebDevSimplified/permission-system/blob/main/auth-rbac.ts

Có nhiều cách nâng cấp trong hệ thống lớn:
- User có thể thuộc 1 group, gán quyền cho group thì mọi user trong group sẽ có quyền đó
- Data cũng có thể chia theo container, gán container cho user để chỉ dịnh user đó được quyền truy cập vào các data nào.
- VD untrest họ chia role chính là permission groups, dùng 1 bảng ánh xạ user với 1 permission group, còn tài nguyên chia theo tenant và container. Khi check sẽ check user có gán cho permission group chứa container của data và action permission k.
User / Group -- [UserRoles] -- Role -- [RolePermissions] -- Permission

RBAC khó mở rộng trong vài TH:
Nếu muốn chủ của comment có thể xoá comment thì phải thêm vào 1 permision mới là delete:ownedComments, mọi nơi vẫn phải check thủ công user.id==authorId. 
Nếu user và moderator đều có quyền đó sẽ phải thêm delete:ownedComments ở cả 2 roles.

--> Clert giúp authorization RBAC chuẩn cho FE: https://www.youtube.com/watch?v=5GG-VUvruzE&list=WL&t=1011s => Clerk sẽ lo logic signin provider, organization, gán roles cho user, user login sẽ lưu vào clerk và ta tuỳ ý chỉnh, lấy roles ở FE dễ dàng. Còn roles gắn với permission nào vẫn lưu ở DB của ta.
Clerk dùng webhook, là 1 cơ chế giao tiếp realtime không cần polling. Tạo 1 url listen sẵn, khi có update thì gửi vào đó là xong. Webhook 1 chiều, muốn 2 chiều thì 2 bên đều phai là server lắng nghe 1 port.

--> Mở rộng RBAC như gg drive, nó còn cho phép user share người khác edit và view docs file.
Giải pháp là vẫn dùng như trên, nhưng mỗi 1 tài nguyên có thể chia sẻ sẽ có role riêng. VD:
Shared File -- [UserFileRole] -- FileRole -- [FileRolePermission] -- Permission
                    |                                                   /
                  User -- [UserRoles] -- Role -- [RolePermissions] ---
                              |
                          Organization(tenant, container)
=> Mỗi khi user tương tác 1 file, sẽ check user có role nào đối với file không: fileid - userid - filerole

-> ABAC: Subject thực hiện Action tương tác Resource.
URL: https://github.com/WebDevSimplified/permission-system/blob/main/auth-abac.ts
Cơ chế check dựa vào hàm tính toán giữa các thuộc tính của object và user. Export ra 1 hàm duy nhất gọi các hàm check đó với từng resource. Có cả blockUsers, inviteUsers



