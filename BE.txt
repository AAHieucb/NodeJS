## API server 
-> License của server

-> Setup biến môi trường bảo mật 
Tạo biến môi trường dựa trên biến môi trường khác
Chạy dự án ở các môi trường khác nhau

-> Thao tác với data stream

-> Multithread, trao đổi data qua lại giữa các thread

-> Tương tác với biến commandline

-> Mã hoá văn bản, mật khẩu

-> Tạo cache tạm trong server, global store tạm

-> Ghi log

-> Tự động ghi log request của user, thống kê

-> Xử lý upload ảnh 

-> Chia cấu trúc thư mục cho router con

-> Web SSR cung html

-> Dùng rate limit cản DDoS

-> Xử lý lỗi connect timeout

-> Xử lý router lỗi, router not found

-> Cung file static, parse json body
Thao tác với file trong hệ thống

-> Thêm các header bảo mật cho route

-> Xử lý cors

-> Compress data gửi đi, dùng brotli

-> Validate type input của object

-> Thao tác với session data và cookies

-> Override method cho form HTML chỉ có GET và POST

-> Flash message trong server SSR

-> Dùng jsonwebtoken tạo accesstoken và refresh token

-> Tạo tính năng gửi mail từ 1 central server

-> Connect SQL DB với Connection Pool hoặc connect thủ công mỗi query
Validate và parameterize tham số

-> Dùng socket gửi sự kiện, tạo kênh và phòng, broadcast

-> Quản lý phiên bản môi trường của server

-> Dùng tối ưu full core CPU trên máy

-> Viết test nhanh cho API ngay trên file dự án
Test performance

-> Auto reload server khi code đổi

-> Chạy nhiều process cho server
Tự khởi động lại khi server crash
Build và Deploy và Hosting

-> Debug

-> Import module với tên thay cho relative url

-> Hanlde global error throw ngay ngoài cùng

-> Xây 1 GraphQL server

-> Dựng crawling server, crawl website

-> Nén file trong server
Thao tác với hệ thống tệp

-> Self sign cho web https

-> Tương tác với mạng xh như telegram

-> Chạy job định kỳ

-> Tạo 1 Streaming server cho video

-> Dùng HTTP2 HTTP3



## Database mongodb
-> Thêm static function cho model

-> Tạo direct connection 

-> Dùng query phức tạp, liên kết bảng

-> Watch sự thay đổi của data

-> Tạo ra 1 thuộc tính ảo cho schema mà k cần lưu trong db

-> Dùng middleware cho schema để xử lý trước và sau khi thực hiện các thao tác

-> Dùng các hàm transaction, tạo transaction custom

-> Đánh index

-> Cài db bằng cloud hay app hay docker.

-> Backup db

-> Tạo replica

-> Parameterize và sanitize input

-> Khai báo type cho trường, mix type, validate type

-> Dùng connection pool: tối ưu tốc độ connect tới db bằng cách tái sử dụng connection.
Serverless khó vì thường mở rộng nhiều theo chiều ngang. Nếu mỗi server duy trì 1 pool riêng chứa các connection thì sẽ bị quá nhiều open connection mở trong 1 lúc. 
Giải pháp là dùng như RDS Proxy (Relational Database Service Proxy) là 1 dịch vụ của AWS: Servers <-- RDS Proxy --> Databases
Đơn giản nó là 1 global connection pool, mọi connection tới db đều gọi tới nó giúp tối ưu chi phí connection.



## Cache redis
-> Config đồng bộ lưu vào ổ đĩa lâu dài
Backup và clone

-> Cấu hình bảo mật, phân quyền

-> Giải quyết 3 sự cố về cache 

-> Sử dụng pub/sub để truyền tin

-> Dùng transaction

-> Thao tác với command và code

-> Subcribe các loại sự kiện trong cache

-> Dùng redis pipeline tối ưu

-> Chia cluster, replica

-> Test performance

-> Update đồng bộ cache và db

-> Xử lý transaction

-> Tính năng client side cache

-> Connect, tuỳ chỉnh mọi config, dùng docker cloud local, tương tác qua giao diện

