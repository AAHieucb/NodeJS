-> ioredis:
new Redis({
  host: 'localhost',
  port: 6379,
  password: 'yourStrongPassword',
  lazyConnect: true, // Khi gọi connect redis sẽ chỉ khởi tạo connection khi cần dùng.
});



-> var testSchema = new Schema({
  level1: new Schema({
    level2: new Schema({
      test: String
    })
  })
  name: mongoose.Schema.Types.String,
  date: {
    type: Date,
    default: Date.now,
    min: ['2025-12-09', "Ngày bị nhỏ quá rồi"],
    max: '2019-19-02'
  },
  age: { type: Number, min: 18, max: 65 },
  array: [],
  dateArray: [Date],
  docArr: [{name: String}],
  singleNested: new Schema({ name: String }),
  nested: {
    age: Number
    first: { 
      type: String, 
      lowercase: true, 
      uppercase: false, 
      trim:true, 
      minlength: 2, 
      match: "Hello", 
      required: function() { this.age > 0 } 
    }
  },
  mapOfString: { type: Map, of: String },
  details: {
    first: String,
    type: {
      type: String
    }
  },
  data: {
    type: Number,
    get: v => Math.round(v),
    set: v => Math.round(v),
    alias: "d"
    index: true,
    unique: true,
    sparse: false,
    enum: [1, 2],
    validate: () => Promise.resolve("OK"); => là validate bất đồng bộ
  },
  phone: {
    type: String,
    validate: {
      validator: function(v) { return /\d{3}-\d{3}-\d{4}/.test(v); },
      message: props => "not a number"
    },
    select: false
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
  },
  author: { 
    type: Schema.Types.ObjectId, 
    ref: "Person5", => ref đến model "Person5" cột _id
    autopopulate: true, => từ lib mongoose-autopopulate sẽ tự populate trường này
  }, 
  hahaTestRef: {type: ObjectId, required: true, refPath: "onModel"}, => là 1 ObjectId ref tới 1 docs khác, docs nào thì xem ở trường onModel
  onModel: {type: String, enum: ["BlogPost", "Product"]}, => 1 enum báo trường hahaTestRef ref tới bảng BlogPost or Product thông qua cột _id
});

--> hahaTestRef: { refPath: "onModel" } => Khi gọi .populate("on") sẽ chạy vào thấy refPath và nhảy vào trường onModel xem bảng nào, rồi check _id của bảng đó trùng với giá trị trường hahaTestRef thì lấy



-> Middleware:
app.use(express.json({ limit: "50mb" })); // parsing application/json vào req.body, max 50mb tránh ddos
app.use(express.urlencoded({ // parsing application/xwww-form-urlencoded vào req.body
  extended: true,
  limit: "50mb"
}));
app.use(express.static(path.join(__dirname, "public"))); // Static file serving

router.use((req, res, next) => { next(); }); // Dùng middleware riêng cho 1 router
router.get("/", (req, res) => { ; });
app.use("/", router);
app.use((err, req, res, next) => { // Error handling
  res.status(500).send("Something broke!")
});

--> multer v1:
var multer = require("multer");
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, __dirname + "/uploads"); // Đường dẫn upload ảnh
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + "_" +  file.originalname); // Tên file
  }
});
const upload = multer({ storage: storage });
app.use(upload.array("avatar", 2)); // Lấy max 2 file được upload trong trường avatar

--> cookie-parser:
app.use(cookieParser( // Lib cookie-parser
  "mySecretKey123", // Ký (kp mã hóa) cookie đảm bảo chỉ server mới đổi giá trị cookie được, client chỉ có thể đọc
  {
    decode: function (val) { // Có thể mã hóa decrypt ở đây và thêm server encrypt cookie trước khi add để che giấu data nhạy cảm.
      return decodeURIComponent(val); // default, có thể custom nếu cookie gửi tới server bị encode thì ở đây ta decode
    }
  }
));

--> cors:
const whitelist = ["", "https://example2.com"]
app.use(cors({
  credentials: true,
  origin: function (origin, callback) {
    if (whitelist.indexOf(origin) !== -1 || !origin) { // !origin sẽ cho phép các origin undefined truy cập, orgin undefined khi request từ cùng nguồn, nội bộ, hoặc gọi bằng tool client nhu postman
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"))
    }
  },
  origin: ["http://localhost:3000"], // or
  optionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204 nên phải convert về 200 để tương thích
}));

--> express-rate-limit:
app.use("/", rateLimit({
  windowMs: 15 * 60 * 1000, // 15p
  max: 20, // 1 IP max 20 request per window per 15p
  skipSuccessfulRequests: true, // Là true thì lib sẽ skip all successful request
  standardHeaders: true, // Thêm các header như RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset
  legacyHeaders: false, // K thêm các header cũ như X-RateLimit-*
}));

--> express-session:
app.use(session({ 
  cookies: { secure: true, maxAge: 6000 },
  secret: "test", // Dùng để encrypt information trong cookies
  resave: true, // K resave khi k có sự thay đổi
  saveUninitialized: true // Lưu cả các giá trị empty
}))

--> compression:
app.use(compression({
  level: 6, // Level càng lớn thì compress càng mạnh nhưng nếu lớn quá thì server sẽ phải xử lý nhiều và chậm hơn. Khuyến nghị để mức 6. 
  threshold: 100 *1000, // Đơn vị là byte. tức phải lớn hơn 100kB thì mới thực hiện nén
  filter: (req, res) => { // Filter là điều kiện khi nào thì nén, để mặc định sẽ nén mọi url
    if(req.headers["x-no-compress"]){ // Header k có cái option x-no-compress thì mới nén
      return false;
    }
    return compression.filter(req, res);
  }
}));



-> ecosystem.config.js:
module.exports = {
  apps: [
    {
      name: "tinkerbellgarden",
      script: "src/index.js",
      cwd: __dirname, // path to project
      args: "one two", // tham số truyền vào script nếu có
      instances: 2,
      autorestart: true,
      watch: false, // K theo dõi file change để reload tự động
      max_memory_restart: "1G", // Nếu quá 1GB RAM, PM2 tự restart server tránh quá tải
      exec_mode: "cluster", // "cluster" giúp zero downtime vì pm2 reload sẽ lần lượt từng instance, đảm bảo instance chưa tới lượt vẫn serve.
      env: { // Dùng env var này khi chạy ở chế độ development "pm2 start ecosystem.config.js"
        NODE_ENV: "development", 
      },
      env_production: { // Khi chạy "pm2 start ecosystem.config.js --env production"
        NODE_ENV: "production",
      },
    },
  ],
  deploy: {
    production: {
      user: "ubuntu", // User SSH kết nối server
      host: "your.production.server.com", // IP của server
      ssh_options: [
        'ForwardAgent=yes',
      ],
      repo: "git@github.com:yourname/my-app.git", // url của repo để clone
      ref: "origin/main", // branch pull về
      path: "/var/www/my-app", // folder chứa project trên server hiện tại
      "post-deploy": "npm install && pm2 reload ecosystem.config.js --env production", // Lệnh chạy khi pull code xong
      env: {
        NODE_ENV: 'production',
      },
    },
    staging: {
      user: "ubuntu",
      host: "your.staging.server.com",
      ref: "origin/develop",
      repo: "git@github.com:yourname/my-app.git",
      path: "/var/www/my-app-staging",
      "post-deploy": "npm install && pm2 reload ecosystem.config.js --env staging"
    }
  }
};

--> "post-deploy"
Lần đầu vào thì dùng "pm2 deploy production/staging setup"
Khi có version mới đổi code thì chạy "pm2 deploy production/staging", nó sẽ thao tác lại pull code và chạy post-deploy. Các instance cũ không tự xóa mà "pm2 reload" trong post-deploy sẽ reload các instance này đúng cách với code mới.

